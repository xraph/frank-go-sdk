name: Release PR

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  check-release-pr:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'release') || contains(github.event.pull_request.title, 'Release v')
    outputs:
      is_release_pr: ${{ steps.check-pr.outputs.is_release_pr }}
      version: ${{ steps.check-pr.outputs.version }}
    steps:
      - name: Check if this is a release PR
        id: check-pr
        run: |
          # Check by title pattern or release label
          if [[ "${{ github.event.pull_request.title }}" =~ ^Release\ v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is_release_pr=true" >> $GITHUB_OUTPUT
            version=$(echo "${{ github.event.pull_request.title }}" | sed 's/Release v//')
            echo "version=$version" >> $GITHUB_OUTPUT
            echo "Detected release PR for version $version"
          else
            echo "is_release_pr=false" >> $GITHUB_OUTPUT
            echo "Not a release PR"
          fi

      - name: Ensure release label exists and is applied
        if: steps.check-pr.outputs.is_release_pr == 'true'
        run: |
          # Ensure the release label exists
          if ! gh label list --search "release" --limit 1 | grep -q "release"; then
            echo "Creating 'release' label..."
            gh label create "release" --description "Automated release PR" --color "0e8a16"
          fi
          
          # Add the release label if it's not already present
          if ! echo "${{ join(github.event.pull_request.labels.*.name, ' ') }}" | grep -q "release"; then
            echo "Adding release label to PR..."
            gh pr edit ${{ github.event.pull_request.number }} --add-label "release"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate-release:
    needs: check-release-pr
    if: needs.check-release-pr.outputs.is_release_pr == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Validate version consistency
        run: |
          version="${{ needs.check-release-pr.outputs.version }}"
          
          # Check if version in types.go matches PR title
          types_version=$(grep "const Version" types.go | sed 's/.*Version = "\(.*\)".*/\1/')
          
          if [ "$types_version" != "$version" ]; then
            echo "❌ Version mismatch:"
            echo "  PR title: $version"
            echo "  types.go: $types_version"
            exit 1
          fi
          
          echo "✅ Version consistency check passed: $version"

      - name: Validate changelog
        run: |
          version="${{ needs.check-release-pr.outputs.version }}"
          
          if [ ! -f CHANGELOG.md ]; then
            echo "❌ CHANGELOG.md not found"
            exit 1
          fi
          
          # Check if changelog contains the version
          if ! grep -q "Changelog for v$version" CHANGELOG.md; then
            echo "❌ Changelog does not contain entry for v$version"
            exit 1
          fi
          
          echo "✅ Changelog validation passed"

      - name: Run tests
        run: |
          go mod download
          go test ./...

      - name: Run linting
        run: |
          if command -v golangci-lint >/dev/null 2>&1; then
            golangci-lint run
          else
            echo "⚠️  golangci-lint not found, skipping lint checks"
          fi

      - name: Build test
        run: |
          go build ./...

      - name: Test build for multiple platforms
        run: |
          version="${{ needs.check-release-pr.outputs.version }}"
          
          # Test builds for different platforms
          echo "Testing build for linux/amd64..."
          GOOS=linux GOARCH=amd64 go build -ldflags="-X main.version=$version" -o /tmp/test-linux-amd64
          
          echo "Testing build for darwin/amd64..."
          GOOS=darwin GOARCH=amd64 go build -ldflags="-X main.version=$version" -o /tmp/test-darwin-amd64
          
          echo "Testing build for windows/amd64..."
          GOOS=windows GOARCH=amd64 go build -ldflags="-X main.version=$version" -o /tmp/test-windows-amd64.exe
          
          echo "✅ All platform builds successful"

      - name: Check for breaking changes
        run: |
          # Simple check for potential breaking changes
          # You can enhance this with more sophisticated checks
          
          echo "Checking for potential breaking changes..."
          
          # Check if any public APIs were removed (simplified check)
          if git diff origin/main...HEAD -- '*.go' | grep -E "^-.*func.*\(" | grep -E "(public|Public|exported)" || true; then
            echo "⚠️  Potential breaking changes detected in public APIs"
            echo "Please ensure version bump is appropriate (major version for breaking changes)"
          fi
          
          # Check if any public types were removed
          if git diff origin/main...HEAD -- '*.go' | grep -E "^-.*type.*" | grep -E "(public|Public|exported)" || true; then
            echo "⚠️  Potential breaking changes detected in public types"
          fi

      - name: Validate go.mod
        run: |
          go mod tidy
          
          if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
            echo "❌ go.mod/go.sum not up to date"
            echo "Please run 'go mod tidy' and commit the changes"
            exit 1
          fi
          
          echo "✅ go.mod validation passed"

      - name: Check dependencies
        run: |
          echo "Checking for known vulnerabilities..."
          
          # Check for known vulnerabilities
          if command -v govulncheck >/dev/null 2>&1; then
            govulncheck ./...
          else
            echo "⚠️  govulncheck not found, skipping vulnerability checks"
          fi

      - name: Generate release artifacts preview
        run: |
          version="${{ needs.check-release-pr.outputs.version }}"
          
          mkdir -p preview
          
          # Create preview builds
          echo "Creating preview builds..."
          GOOS=linux GOARCH=amd64 go build -ldflags="-X main.version=$version" -o preview/frank-go-sdk-linux-amd64
          GOOS=darwin GOARCH=amd64 go build -ldflags="-X main.version=$version" -o preview/frank-go-sdk-darwin-amd64
          GOOS=windows GOARCH=amd64 go build -ldflags="-X main.version=$version" -o preview/frank-go-sdk-windows-amd64.exe
          
          # List the artifacts
          echo "📦 Release artifacts that will be created:"
          ls -la preview/
          
          # Calculate checksums
          echo "🔐 Checksums:"
          if command -v sha256sum >/dev/null 2>&1; then
            cd preview && sha256sum * > checksums.txt
            cat checksums.txt
          fi

      - name: Update PR with validation results
        uses: actions/github-script@v7
        with:
          script: |
            const version = "${{ needs.check-release-pr.outputs.version }}";
            const body = `## 🚀 Release PR Validation Results
            
            **Version:** \`v${version}\`
            **Status:** ✅ All checks passed
            
            ### ✅ Validation Checks Completed
            - Version consistency across files
            - Changelog validation
            - Test suite execution
            - Multi-platform build testing
            - Go module validation
            
            ### 📋 Release Checklist
            - [x] Version updated in types.go
            - [x] Changelog generated and valid
            - [x] Tests passing
            - [x] Builds successful for all platforms
            - [x] No breaking changes detected
            - [x] Dependencies up to date
            - [ ] Ready for review and merge
            
            ### 🔍 What happens next?
            Once this PR is approved and merged:
            1. A new Git tag \`v${version}\` will be created
            2. GitHub release will be published automatically
            3. Release artifacts will be attached to the release
            4. The release branch will be cleaned up
            
            ---
            
            **Note:** This is an automated release PR. The release will be created automatically when merged.`;
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Release PR Validation Results')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  security-scan:
    needs: check-release-pr
    if: needs.check-release-pr.outputs.is_release_pr == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Run security scan
        run: |
          # Install gosec if not available
          if ! command -v gosec >/dev/null 2>&1; then
            go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          fi
          
          # Run security scan
          gosec -fmt json -out gosec-report.json ./...
          
          # Check if there are any high or medium severity issues
          if [ -f gosec-report.json ]; then
            high_issues=$(jq '.Stats.NumFound' gosec-report.json 2>/dev/null || echo "0")
            if [ "$high_issues" -gt 0 ]; then
              echo "⚠️  Security scan found $high_issues issues"
              echo "Please review the security report before proceeding with the release"
          
              # Show summary
              jq '.Issues[] | select(.Severity == "HIGH" or .Severity == "MEDIUM") | {Rule: .RuleID, Severity: .Severity, File: .File, Line: .Line, Details: .Details}' gosec-report.json || true
            else
              echo "✅ No security issues found"
            fi
          fi

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: gosec-report.json
          retention-days: 30

  auto-approve:
    needs: [check-release-pr, validate-release, security-scan]
    if: |
      needs.check-release-pr.outputs.is_release_pr == 'true' &&
      needs.validate-release.result == 'success' &&
      needs.security-scan.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Auto-approve release PR
        uses: actions/github-script@v7
        with:
          script: |
            // Only auto-approve if all checks pass and this is a bot-created PR
            const pr = context.payload.pull_request;
            
            if (pr.user.type === 'Bot' || pr.user.login === 'github-actions[bot]') {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                event: 'APPROVE',
                body: '🤖 Automated approval for release PR - all validation checks passed!'
              });
            
              console.log('✅ Release PR auto-approved');
            } else {
              console.log('ℹ️  Skipping auto-approval - PR not created by bot');
            }

  ready-to-merge:
    needs: [check-release-pr, validate-release, security-scan]
    if: |
      needs.check-release-pr.outputs.is_release_pr == 'true' &&
      needs.validate-release.result == 'success' &&
      needs.security-scan.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Create ready-to-merge label if needed
        run: |
          # Ensure the ready-to-merge label exists
          if ! gh label list --search "ready-to-merge" --limit 1 | grep -q "ready-to-merge"; then
            echo "Creating 'ready-to-merge' label..."
            gh label create "ready-to-merge" --description "Ready to be merged" --color "0e8a16"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add ready-to-merge label
        run: |
          gh pr edit ${{ github.event.pull_request.number }} --add-label "ready-to-merge"
          echo "✅ Added ready-to-merge label"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment merge instructions
        uses: actions/github-script@v7
        with:
          script: |
            const version = "${{ needs.check-release-pr.outputs.version }}";
            const body = `## 🎉 Release PR Ready to Merge!
            
            All validation checks have passed for version \`v${version}\`.
            
            ### ✅ Completed Validations
            - Version consistency ✅
            - Changelog validation ✅
            - Test suite ✅
            - Multi-platform builds ✅
            - Security scan ✅
            - Go module validation ✅
            
            ### 🚀 Ready for Release
            This PR is now ready to be merged. Once merged:
            1. Git tag \`v${version}\` will be created automatically
            2. GitHub release will be published with built artifacts
            3. Release branch will be cleaned up
            
            **Merge when ready to release v${version}!**`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });