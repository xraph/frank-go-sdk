name: Release

on:
  push:
    branches: [main]
    # Exclude pushes that are just tags to prevent loops
    tags-ignore: ['**']
  schedule:
    # Run daily at 9 AM UTC to check for unreleased changes
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, minor, major)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    # Skip if commit message contains [skip release] or [release skip]
    if: |
      !contains(github.event.head_commit.message, '[skip release]') &&
      !contains(github.event.head_commit.message, '[release skip]') &&
      !contains(github.event.head_commit.message, '[skip ci]')
    outputs:
      should_release: ${{ steps.check-changes.outputs.should_release }}
      version: ${{ steps.version.outputs.version }}
      pr_number: ${{ steps.find-pr.outputs.pr_number }}
      pr_exists: ${{ steps.find-pr.outputs.pr_exists }}
      existing_version: ${{ steps.find-pr.outputs.existing_version }}
      is_release_commit: ${{ steps.check-release-commit.outputs.is_release_commit }}
      release_version: ${{ steps.check-release-commit.outputs.release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if this is a release commit
        id: check-release-commit
        run: |
          latest_commit_message=$(git log -1 --pretty=format:"%s")
          echo "Latest commit: $latest_commit_message"
          
          # Check if this is a release preparation commit
          if [[ "$latest_commit_message" =~ ^chore:\ prepare\ release\ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "is_release_commit=true" >> $GITHUB_OUTPUT
            version=$(echo "$latest_commit_message" | sed 's/chore: prepare release v\([0-9]*\.[0-9]*\.[0-9]*\).*/\1/')
            echo "release_version=$version" >> $GITHUB_OUTPUT
            echo "This is a release commit for version $version"
          
            # Exit early if this is a release commit - no need to check other things
            exit 0
          else
            echo "is_release_commit=false" >> $GITHUB_OUTPUT
            echo "This is not a release commit"
          fi

      - name: Setup Go
        if: steps.check-release-commit.outputs.is_release_commit == 'false'
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Get latest release
        id: latest-release
        if: steps.check-release-commit.outputs.is_release_commit == 'false'
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "Latest tag: $latest_tag"

      - name: Check for changes since last release
        id: check-changes
        if: steps.check-release-commit.outputs.is_release_commit == 'false'
        run: |
          latest_tag="${{ steps.latest-release.outputs.latest_tag }}"
          
          # Check if there are any commits since the last release
          if [ "$latest_tag" = "v0.0.0" ]; then
            commits_since_release=$(git rev-list --count HEAD)
          else
            commits_since_release=$(git rev-list --count ${latest_tag}..HEAD)
          fi
          
          echo "commits_since_release=$commits_since_release"
          
          # Check if there are any significant changes (not just CI/docs)
          if [ "$commits_since_release" -gt 0 ]; then
            if [ "$latest_tag" = "v0.0.0" ]; then
              significant_changes=$(git log --oneline --grep="^feat\|^fix\|^refactor\|^perf\|BREAKING" HEAD || echo "")
            else
              significant_changes=$(git log --oneline --grep="^feat\|^fix\|^refactor\|^perf\|BREAKING" ${latest_tag}..HEAD || echo "")
            fi
          
            if [ -n "$significant_changes" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "Should release: true"
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "Should release: false (no significant changes)"
            fi
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "Should release: false (no commits since last release)"
          fi

      - name: Find existing release PR
        id: find-pr
        if: steps.check-release-commit.outputs.is_release_commit == 'false'
        run: |
          # Look for open PRs with release label
          pr_data=$(gh pr list --state open --label "release" --json number,title,headRefName --limit 1)
          
          if [ "$pr_data" = "[]" ]; then
            echo "pr_exists=false" >> $GITHUB_OUTPUT
            echo "No existing release PR found"
          else
            pr_number=$(echo "$pr_data" | jq -r '.[0].number')
            pr_title=$(echo "$pr_data" | jq -r '.[0].title')
            branch_name=$(echo "$pr_data" | jq -r '.[0].headRefName')
          
            # Extract version from PR title (format: "Release vX.Y.Z")
            existing_version=$(echo "$pr_title" | sed -n 's/^Release v\([0-9]*\.[0-9]*\.[0-9]*\)$/\1/p')
          
            echo "pr_exists=true" >> $GITHUB_OUTPUT
            echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
            echo "existing_version=$existing_version" >> $GITHUB_OUTPUT
            echo "branch_name=$branch_name" >> $GITHUB_OUTPUT
            echo "Found existing release PR: #$pr_number (v$existing_version) on branch $branch_name"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine next version
        id: version
        if: |
          steps.check-release-commit.outputs.is_release_commit == 'false' &&
          steps.check-changes.outputs.should_release == 'true'
        run: |
          latest_tag="${{ steps.latest-release.outputs.latest_tag }}"
          existing_version="${{ steps.find-pr.outputs.existing_version }}"
          
          # Remove 'v' prefix if present
          current_version=${latest_tag#v}
          
          # If no previous version, start with 1.0.0
          if [ "$current_version" = "0.0.0" ]; then
            current_version="1.0.0"
          fi
          
          # If there's an existing release PR, use that version unless we need a higher one
          if [ -n "$existing_version" ]; then
            echo "Found existing release PR for version $existing_version"
          
            # Check if we need to bump the version higher based on new commits
            latest_pr_commit=$(gh pr view ${{ steps.find-pr.outputs.pr_number }} --json commits --jq '.commits[-1].oid' || echo "")
          
            if [ -n "$latest_pr_commit" ]; then
              # Check for commits since the PR was last updated
              new_commits=$(git rev-list --count ${latest_pr_commit}..HEAD || echo "0")
          
              if [ "$new_commits" -gt 0 ]; then
                echo "Found $new_commits new commits since last PR update"
                # Use the existing version as base and potentially bump it
                current_version="$existing_version"
              else
                echo "No new commits since last PR update, using existing version"
                echo "version=$existing_version" >> $GITHUB_OUTPUT
                echo "release_type=existing" >> $GITHUB_OUTPUT
                exit 0
              fi
            else
              echo "Using existing version from PR: $existing_version"
              echo "version=$existing_version" >> $GITHUB_OUTPUT
              echo "release_type=existing" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          # Split version into parts
          IFS='.' read -r major minor patch <<< "$current_version"
          
          # Determine version bump type
          release_type="${{ github.event.inputs.release_type }}"
          
          # Auto-detect release type based on commit messages if not specified
          if [ -z "$release_type" ] || [ "$release_type" = "patch" ]; then
            if [ "$latest_tag" = "v0.0.0" ]; then
              commits_to_check=$(git log --oneline HEAD)
            else
              commits_to_check=$(git log --oneline ${latest_tag}..HEAD)
            fi
          
            if echo "$commits_to_check" | grep -q "BREAKING\|^feat!"; then
              release_type="major"
            elif echo "$commits_to_check" | grep -q "^feat"; then
              release_type="minor"
            else
              release_type="patch"
            fi
          fi
          
          # Increment version
          case $release_type in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
          
          new_version="$major.$minor.$patch"
          echo "version=$new_version" >> $GITHUB_OUTPUT
          echo "release_type=$release_type" >> $GITHUB_OUTPUT
          echo "New version: $new_version (type: $release_type)"

  create-or-update-release-pr:
    needs: prepare-release
    if: |
      needs.prepare-release.outputs.should_release == 'true' &&
      needs.prepare-release.outputs.is_release_commit == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Prepare release branch
        run: |
          version="${{ needs.prepare-release.outputs.version }}"
          branch_name="release/v$version"
          pr_exists="${{ needs.prepare-release.outputs.pr_exists }}"
          
          echo "branch_name=$branch_name" >> $GITHUB_ENV
          
          # Fetch all remote branches
          git fetch origin
          
          if [ "$pr_exists" = "true" ]; then
            echo "Updating existing release branch: $branch_name"
          
            # Check if the remote branch exists
            if git ls-remote --heads origin "$branch_name" | grep -q "$branch_name"; then
              echo "Remote branch exists, checking out and updating"
              git checkout -B "$branch_name" "origin/$branch_name"
          
              # Reset to main and reapply changes to avoid conflicts
              git reset --hard origin/main
            else
              echo "Remote branch doesn't exist, creating from main"
              git checkout -b "$branch_name"
            fi
          else
            echo "Creating new release branch: $branch_name"
          
            # Delete local branch if it exists
            git branch -D "$branch_name" 2>/dev/null || true
          
            # Delete remote branch if it exists
            git push origin --delete "$branch_name" 2>/dev/null || true
          
            # Create fresh branch from main
            git checkout -b "$branch_name"
          fi

      - name: Update version in types.go
        run: |
          version="${{ needs.prepare-release.outputs.version }}"
          
          # Check if types.go exists
          if [ ! -f types.go ]; then
            echo "types.go not found, creating it"
            echo 'package main

          const Version = "'$version'"' > types.go
          else
            # Update existing file
            sed -i "s/const Version = \".*\"/const Version = \"$version\"/" types.go
          fi
          
          # Verify the change
          echo "Updated version in types.go:"
          grep "const Version" types.go

      - name: Generate changelog
        id: changelog
        run: |
          version="${{ needs.prepare-release.outputs.version }}"
          
          # Get the latest tag for changelog generation
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          echo "# Changelog for v$version" > CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          echo "## What's Changed" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          
          # Generate changelog from commits
          if [ -n "$latest_tag" ]; then
            commits=$(git log --oneline --pretty=format:"- %s" ${latest_tag}..HEAD)
          else
            commits=$(git log --oneline --pretty=format:"- %s" HEAD)
          fi
          
          # Categorize commits
          echo "### 🚀 Features" >> CHANGELOG_TEMP.md
          echo "$commits" | grep -E "^- feat" || echo "- No new features" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          
          echo "### 🐛 Bug Fixes" >> CHANGELOG_TEMP.md
          echo "$commits" | grep -E "^- fix" || echo "- No bug fixes" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          
          echo "### 🔧 Other Changes" >> CHANGELOG_TEMP.md
          echo "$commits" | grep -vE "^- (feat|fix)" || echo "- No other changes" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          
          # Add to main CHANGELOG.md if it exists
          if [ -f CHANGELOG.md ]; then
            # Check if this version already exists in changelog
            if grep -q "# Changelog for v$version" CHANGELOG.md; then
              echo "Version already exists in changelog, replacing entry"
              # Remove existing entry and add new one
              awk "!/^# Changelog for v$version/,/^# Changelog for v[0-9]/ {if (!/^# Changelog for v[0-9]/ || /^# Changelog for v$version/) next} 1" CHANGELOG.md > CHANGELOG_NEW.md
              echo "# Changelog" > CHANGELOG_FINAL.md
              echo "" >> CHANGELOG_FINAL.md
              cat CHANGELOG_TEMP.md >> CHANGELOG_FINAL.md
              echo "" >> CHANGELOG_FINAL.md
              tail -n +2 CHANGELOG_NEW.md >> CHANGELOG_FINAL.md
              mv CHANGELOG_FINAL.md CHANGELOG.md
            else
              # Insert new version at the top
              echo "# Changelog" > CHANGELOG_NEW.md
              echo "" >> CHANGELOG_NEW.md
              cat CHANGELOG_TEMP.md >> CHANGELOG_NEW.md
              echo "" >> CHANGELOG_NEW.md
              tail -n +2 CHANGELOG.md >> CHANGELOG_NEW.md
              mv CHANGELOG_NEW.md CHANGELOG.md
            fi
          else
            mv CHANGELOG_TEMP.md CHANGELOG.md
          fi
          
          # Store changelog content for PR description
          changelog_content=$(cat CHANGELOG_TEMP.md 2>/dev/null || echo "")
          {
            echo "changelog_content<<EOF"
            echo "$changelog_content"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Update go.mod if needed
        run: |
          # Update module version in go.mod if it contains version info
          if grep -q "// v" go.mod; then
            version="${{ needs.prepare-release.outputs.version }}"
            sed -i "s|// v.*|// v$version|" go.mod
          fi

      - name: Run tests
        run: |
          go mod download
          go test ./...

      - name: Commit changes
        run: |
          version="${{ needs.prepare-release.outputs.version }}"
          
          git add .
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: prepare release v$version [skip release]"
          fi

      - name: Push branch with force
        run: |
          version="${{ needs.prepare-release.outputs.version }}"
          branch_name="${{ env.branch_name }}"
          
          # Force push to ensure we overwrite any conflicts
          git push --force-with-lease origin "$branch_name" || git push --force origin "$branch_name"
          
          echo "Successfully pushed $branch_name"

      - name: Create or update release PR
        run: |
          version="${{ needs.prepare-release.outputs.version }}"
          pr_exists="${{ needs.prepare-release.outputs.pr_exists }}"
          pr_number="${{ needs.prepare-release.outputs.pr_number }}"
          
          pr_title="Release v$version"
          pr_body="## Release v$version

          This is an automated release PR.

          ${{ steps.changelog.outputs.changelog_content }}

          ---

          **Release Checklist:**
          - [x] Version updated in types.go
          - [x] Changelog generated
          - [x] Tests passing
          - [ ] Ready to merge and release

          Once this PR is merged, a new release will be automatically created."
          
          if [ "$pr_exists" = "true" ]; then
            echo "Updating existing release PR #$pr_number"
            gh pr edit $pr_number \
              --title "$pr_title" \
              --body "$pr_body"
          
            # Add a comment about the update
            gh pr comment $pr_number --body "🔄 **Release PR Updated**

          Version updated to v$version with latest changes from main branch.

          Updated: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          
            echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
          else
            echo "Creating new release PR"
            pr_url=$(gh pr create \
              --title "$pr_title" \
              --body "$pr_body" \
              --base main \
              --head ${{ env.branch_name }} \
              --label "release")
          
            # Extract PR number from URL
            pr_number=$(echo "$pr_url" | sed 's/.*\/pull\/\([0-9]*\)$/\1/')
            echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
          
            echo "Created new release PR #$pr_number"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' &&
      needs.prepare-release.outputs.is_release_commit == 'true'
    needs: prepare-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get release version
        id: get-version
        run: |
          version="${{ needs.prepare-release.outputs.release_version }}"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Release version: $version"

      - name: Check if tag already exists
        id: check-tag
        run: |
          version="${{ steps.get-version.outputs.version }}"
          
          if git tag -l "v$version" | grep -q "v$version"; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "Tag v$version already exists"
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            echo "Tag v$version does not exist"
          fi

      - name: Setup Go
        if: steps.check-tag.outputs.tag_exists == 'false'
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Run tests
        if: steps.check-tag.outputs.tag_exists == 'false'
        run: |
          go mod download
          go test ./...

      - name: Build binaries
        if: steps.check-tag.outputs.tag_exists == 'false'
        run: |
          mkdir -p dist
          
          # Build for different architectures
          version="${{ steps.get-version.outputs.version }}"
          GOOS=linux GOARCH=amd64 go build -ldflags="-X main.version=$version" -o dist/frank-go-sdk-linux-amd64 ./...
          GOOS=darwin GOARCH=amd64 go build -ldflags="-X main.version=$version" -o dist/frank-go-sdk-darwin-amd64 ./...
          GOOS=darwin GOARCH=arm64 go build -ldflags="-X main.version=$version" -o dist/frank-go-sdk-darwin-arm64 ./...
          GOOS=windows GOARCH=amd64 go build -ldflags="-X main.version=$version" -o dist/frank-go-sdk-windows-amd64.exe ./...
          
          echo "Built binaries:"
          ls -la dist/

      - name: Extract changelog for release
        if: steps.check-tag.outputs.tag_exists == 'false'
        id: changelog
        run: |
          version="${{ steps.get-version.outputs.version }}"
          
          # Extract changelog for this version
          if [ -f CHANGELOG.md ]; then
            # Find the section for this version
            awk "/^# Changelog for v$version/,/^# Changelog for v[0-9]/ {if (!/^# Changelog for v[0-9]/ || /^# Changelog for v$version/) print}" CHANGELOG.md > release_notes.md
          
            # Remove the first line (version header) and clean up
            if [ -s release_notes.md ]; then
              tail -n +2 release_notes.md > release_notes_cleaned.md
          
              # If the file ends with another version header, remove it
              if tail -n 1 release_notes_cleaned.md | grep -q "^# Changelog for v"; then
                head -n -1 release_notes_cleaned.md > release_notes_final.md
              else
                mv release_notes_cleaned.md release_notes_final.md
              fi
            else
              echo "## Release v$version" > release_notes_final.md
              echo "" >> release_notes_final.md
              echo "Automated release with latest changes." >> release_notes_final.md
            fi
          
            echo "Release notes extracted for version $version"
          else
            echo "No changelog found, creating basic release notes"
            echo "## Release v$version" > release_notes_final.md
            echo "" >> release_notes_final.md
            echo "Automated release with latest changes." >> release_notes_final.md
          fi
          
          echo "Release notes content:"
          cat release_notes_final.md

      - name: Configure Git for tagging
        if: steps.check-tag.outputs.tag_exists == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create Git Tag
        if: steps.check-tag.outputs.tag_exists == 'false'
        run: |
          version="${{ steps.get-version.outputs.version }}"
          
          # Create annotated tag
          git tag -a "v$version" -m "Release v$version

          $(cat release_notes_final.md)"
          
          # Push the tag
          git push origin "v$version"
          
          echo "Created and pushed tag v$version"

      - name: Verify tag was created
        if: steps.check-tag.outputs.tag_exists == 'false'
        run: |
          version="${{ steps.get-version.outputs.version }}"
          
          # Fetch to make sure we have the latest tags
          git fetch --tags
          
          # Verify the tag exists
          if git tag -l "v$version" | grep -q "v$version"; then
            echo "✅ Tag v$version was successfully created"
            git show "v$version" --no-patch --format="Tag: %D%nDate: %ad%nMessage: %B"
          else
            echo "❌ Failed to create tag v$version"
            exit 1
          fi

      - name: Create GitHub Release
        if: steps.check-tag.outputs.tag_exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          name: Release v${{ steps.get-version.outputs.version }}
          body_path: release_notes_final.md
          files: |
            dist/*
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up release branch
        if: steps.check-tag.outputs.tag_exists == 'false'
        run: |
          version="${{ steps.get-version.outputs.version }}"
          branch_name="release/v$version"
          
          # Delete the release branch if it exists
          if git ls-remote --heads origin "$branch_name" | grep -q "$branch_name"; then
            git push origin --delete "$branch_name" || echo "Branch already deleted or couldn't delete"
            echo "Deleted release branch: $branch_name"
          fi

      - name: Verify release was created
        if: steps.check-tag.outputs.tag_exists == 'false'
        run: |
          version="${{ steps.get-version.outputs.version }}"
          
          # Check if GitHub release was created
          if gh release view "v$version" >/dev/null 2>&1; then
            echo "✅ GitHub release v$version was successfully created"
            gh release view "v$version"
          else
            echo "❌ GitHub release v$version was not created"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}